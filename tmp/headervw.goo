package sidenavvw

import (
	"dshusdock/go_project/config"
	con "dshusdock/go_project/internal/constants"
	"dshusdock/go_project/internal/services/session"	
	b "dshusdock/go_project/internal/views/base"	
	"encoding/gob"
	"fmt"
	"net/http"
)

type HeaderVw struct {
	App *config.AppConfig
}

var AppHeaderVw *HeaderVw

func init() {
	AppHeaderVw = &HeaderVw{
		App: nil,
	}
	gob.Register(AppHeaderVwData{})
}

func (m *HeaderVw) RegisterHandler() con.ViewHandler {
	return &HeaderVw{}
}

func (m *HeaderVw) HandleRequest(w http.ResponseWriter, event con.AppEvent) any {
	fmt.Println("[HeaderVw] - HandleRequest")
	var obj AppHeaderVwData

	if session.SessionSvc.SessionMgr.Exists(event.Request.Context(), "HeaderVw") {
		obj = session.SessionSvc.SessionMgr.Pop(event.Request.Context(), "HeaderVw").(AppHeaderVwData)
	} else {
		obj = *CreateHeaderVwData()	
	}

	obj.ProcessHttpRequest(w, event)	
	session.SessionSvc.SessionMgr.Put(event.Request.Context(), "HeaderVw", obj)

	return obj
}
 
///////////////////// Layout View Data //////////////////////

type AppHeaderVwData struct {
	Base con.BaseTemplateparams
	Data any
	View int
}

func CreateHeaderVwData() *AppHeaderVwData {
	return &AppHeaderVwData{
		Base: b.GetBaseTemplateObj(),
		Data: nil,
	}
}

func (m *AppHeaderVwData) ProcessHttpRequest(w http.ResponseWriter, event con.AppEvent) *AppHeaderVwData{
	return m
}

