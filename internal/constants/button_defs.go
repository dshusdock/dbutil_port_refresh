package constants

type ButtonData struct {
	Name string
	Label string
	Category string
	TableName string
	ColumnNameHeaderMapping []string
	SQLString string
}

var ButtonMap = []ButtonData{
	{
		Name: "generalsysteminfo",
		Label: "Enterprise Info",
		Category: "System",
		TableName: "Enterprise Information",
		ColumnNameHeaderMapping: []string{
			"EnterpriseName", 
			"EnterpriseDomainName", 
			"InstanceName", 
			"InstanceDomainName", 										
			"ZoneId", 
			"certificateAuthorityIP", 
			"softwareVersion", 
			"name", 
			"replicationEnabled", 										
			"replicationRole",
		},
		SQLString: "select d.name as EnterpriseName, d.domainName as EnterpriseDomainName, c.name as InstanceName, c.domainName as InstanceDomainName, a.id as ZoneId, a.certificateAuthorityIP, a.name, a.softwareVersion, b.replicationEnabled, b.replicationRole from Zone a, InterzoneCommConfigZone b, Instance c, Enterprise d where d.id=c.parentEnterpriseId and c.id=a.parentInstanceId and b.id=a.interzoneCommConfigZoneId",
	}, 
	{
		Name: "zoneinfo",
		Label: "Zone Info",
		Category: "System",
		TableName: "Zone Information",
		ColumnNameHeaderMapping: []string{
			"ZoneCluster",  
			"vIPAddress",  
			"iPAddress",  
			"hostName", 
			"macAddress", 
			"haRole", 
			"haState", 
		},
		SQLString: "select  a.parentZoneId as ZoneCluster, a.vIPAddress, c.iPAddress,c.hostName,c.macAddress,d.haRole,d.haState from ServerCluster a, ServerClusterDeviceServerServersMap b, Device c, DeviceServer d where a.id=b.serverClusterId and b.serversId=c.deviceServerId and c.deviceServerId=d.id",
	}, 
	{
		Name: "CCMinfo",
		Label: "CCM Info",
		Category: "System",
		TableName: "CCM Information",
		ColumnNameHeaderMapping: []string{
			"Host Name",
			"MAC Address",
			"IP Address",
			"Parent Zone ID", 
			"Server Personality", 
			"HA Role",
			"HA State",
			"Listen Address",
		},		
		SQLString: "select a.hostname, a.macAddress, a.iPAddress,a.parentZoneId, b.serverPersonality,b.haRole,b.haState,c.listenAddress from Device a, DeviceServer b, ComponentAppServer c where a.deviceTypeId=5 and a.deviceServerId = b.id and b.componentAppServerId=c.id order by a.parentZoneId,a.iPAddress",
	}, 
	{
		Name: "MMinfo",
		Label: "Media Manager Info",
		Category: "System",
		TableName: "Media Manager Information",
		ColumnNameHeaderMapping: []string{
			"Host Name",
			"MAC Address",
			"IP Address",
			"Parent Zone ID",
			"Server Personality",
			"Request Operational State",
		},
		SQLString: "select a.hostname, a.macAddress, a.iPAddress,a.parentZoneId,b.serverPersonality, d.requestOperationalState from Device a, DeviceServer b,  ComponentMediaServer d where a.deviceTypeId=5 and a.deviceServerId = b.id and b.componentMediaServerId=d.id",
	}, 
	{
		Name: "MGinfo",
		Label: "Media Gateway Info",
		Category: "System",
		TableName: "Media Gateway Information",
		ColumnNameHeaderMapping: []string{
			"MG Name",
			"MAC Address",
			"IP Address",
			"Parent Zone ID",
		},
		SQLString: "select a.name, a.macAddress, a.iPAddress,a.parentZoneId from Device a where a.deviceTypeId=2",
	}, 
	{
		Name: "DeviceZoneInfo",
		Label: "Device/Zone Info",
		Category: "System",
		TableName: "Device Zone",
		ColumnNameHeaderMapping: []string{
			"MAC Address",
			"IP Address",
			"Login Name",
			"Deploy Zone",
			"Bcp Zone",
			"Bcp Pref",
			"Current Zone",
		},
		SQLString: "select a.macAddress, a.IPAddress, d.loginName, a.parentZoneId as 'DeployZone', b.backupZoneId as 'BcpZone',b.preference as 'BcpPref',c.zoneId as 'CurrentZone' from Device a, CDIBCPPreference b, LogonSession c, User d where a.id=b.parentDeviceId and a.id=c.deviceId and c.userId=d.id order by a.parentZoneId, a.macAddress,b.backupZoneId,b.preference",
	}, 
	{
		Name: "IQMAXTurretInventory",
		Label: "IQMAX Turret Inventory",
		Category: "System",
		TableName: "IQMAX Turret Inventory",
		ColumnNameHeaderMapping: []string{
			"Device ID",
			"MAC Address",
			"IP Address",
			"Model",
			"Inventory Info",
			"inventory Registration Time",
			"User ID",
			"Login Name",
		},
		SQLString: "select a.id, a.macAddress, a.iPAddress, a.model, a.inventoryInfo, a.inventoryRegistrationTime, b.userId, b.loginName from Device a left join (select d.deviceId, d.userId, e.loginName from LogonSession d, User e where d.userId=e.id) b on a.id=b.deviceId where a.model='IQMAX' and a.inventoryInfo like '%.0 hwpart%'",
	}, 
	{
		Name: "UserInfo",
		Label: "User Info",
		Category: "User",
		TableName: "User Information",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"User CDI ID",
			"Login Name",
			"Device ID",
			"MAC Address",
			"IP Address",
		},
		SQLString: "select a.id as userid, a.userCDIId as usercdiid, a.loginName as loginname, d.id as deviceid, d.macAddress as macaddress, d.IPAddress as ip_address from User a left join (select c.userId, b.id, b.macAddress, b.IPAddress from Device b, LogonSession c where b.id=c.deviceId)d on a.id=d.userId order by a.loginName",
	}, 
	{
		Name: "CommunicationHistory",
		Label: "Communication History",
		Category: "User",
		TableName: "Communication History",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Device ID",
			"Date",
			"Count",
		},
		SQLString: "select distinct userId, deviceIdId, left(startTime,10) as 'Date', count(startTime) as 'Count' from CommunicationHistory where callType='record' group by left(startTime,10),userId",
	},
	{
		Name: "JobExecutionEvent",
		Label: "Job Execution Event",
		Category: "User",
		TableName: "Job Execution Event",
		ColumnNameHeaderMapping: []string{
			"Description",
			"Date/Hour",
			"Count",
		},
		SQLString: "select distinct left(description, 22) as 'Description', left(startTime,13) as 'Date/Hour', count(startTime) as 'Count' from JobExecutionEvent group by left(description, 22),left(startTime,13)",
	},
	{
		Name: "JobSummary",
		Label: "Job Summary",
		Category: "User",
		TableName: "Job Summary",
		ColumnNameHeaderMapping: []string{
			"Description",
			"Date/Hour",
			"Zone ID",
			"Count",
		},
		SQLString: "select distinct left(description, 22) as 'Description', left(startTime,10) as 'Date/Hour', zoneId, count(startTime) as 'Count' from Job  group by left(description, 22),left(startTime,10),zoneId",
	},
	{
		Name: "RecordingMix",
		Label: "Recording Mix",
		Category: "Recording",
		TableName: "Recording Mix",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Login Name",
			"RecordMix ProfileId",
			"RecordMix ID",
			"Mix",
		},
		SQLString: "select a.id as UserId, a.loginName, b.recordMixProfileId, c.recordMixId, d.uiName as Mix from User a, UserTurret b, RecordMixProfileOrder c, RecordMix d where a.userTurretId=b.id and b.recordMixProfileId=c.parentRecordMixProfileId and c.recordMixId=d.id order by a.id, b.recordMixProfileId, c.recordMixId",
	},
	{
		Name: "RecordingMixwthMask",
		Label: "Recording Mix with Mask",
		Category: "Recording",
		TableName: "Recording Mix with  Mask",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Login Name",
			"RecordMix ProfileId",
			"RecordMix ID",
			"Sequence",
			"Mix",
			"Receive Source",
			"Transmit Source",
		},
		SQLString: "(select a.id as UserId, a.loginName, b.recordMixProfileId, c.recordMixId,c.sequence, d.uiName as Mix, conv(d.receiveSource,10,2) as receiveSource, conv(d.transmitSource,10,2) as transmitSource from User a, UserTurret b, RecordMixProfileOrder c, RecordMix d where a.userTurretId=b.id and b.recordMixProfileId=c.parentRecordMixProfileId and c.recordMixId=d.id order by a.loginName,b.recordMixProfileId, c.sequence) union (select a.id as UserId, a.loginName, b.recordMixProfileId, c.recordMixId,c.sequence, d.uiName as Mix, conv(d.receiveSource,10,2) as receiveSource, conv(d.transmitSource,10,2) as transmitSource from User a, UserMercury b, RecordMixProfileOrder c, RecordMix d where a.userMercuryId=b.id and b.recordMixProfileId=c.parentRecordMixProfileId and c.recordMixId=d.id order by a.loginName,b.recordMixProfileId, c.sequence) union (select a.id as UserId, a.loginName, b.recordMixProfileId, c.recordMixId,c.sequence, d.uiName as Mix, conv(d.receiveSource,10,2) as receiveSource, conv(d.transmitSource,10,2) as transmitSource from User a, UserPulse b, RecordMixProfileOrder c, RecordMix d where a.userPulseId=b.id and b.recordMixProfileId=c.parentRecordMixProfileId and c.recordMixId=d.id order by a.loginName,b.recordMixProfileId, c.sequence) union (select a.id as UserId, a.loginName, b.recordMixProfileId, c.recordMixId,c.sequence, d.uiName as Mix, conv(d.receiveSource,10,2) as receiveSource, conv(d.transmitSource,10,2) as transmitSource from User a, UserUDA b, RecordMixProfileOrder c, RecordMix d where a.userUDAId=b.id and b.recordMixProfileId=c.parentRecordMixProfileId and c.recordMixId=d.id order by a.loginName,b.recordMixProfileId, c.sequence);",
	},
	{
		Name: "RecordingMixLoggedOn",
		Label: "Recording Mix LogOnSession",
		Category: "Recording",
		TableName: "Recording Mix LogOnSession",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Device ID",
			"Login Name",
			"RecordMix ProfileId",
			"Sequence",
			"RecordMix ID",
			"Mix",
			"Receive Source",
			"Transmit Source",
		},
		SQLString: "select a.id as UserId, f.deviceId, a.loginName, b.recordMixProfileId, c.sequence, c.recordMixId, d.uiName as Mix, conv(d.receiveSource,10,2) as receiveSource , conv(d.transmitSource,10,2) as transmitSource from User a left join(select deviceId, userId from LogonSession)f on a.id=f.userId, UserTurret b, RecordMixProfileOrder c, RecordMix d where a.userTurretId=b.id and b.recordMixProfileId=c.parentRecordMixProfileId and c.recordMixId=d.id order by a.id, b.recordMixProfileId, c.sequence",
	},
	{
		Name: "ButtonResourceAppearance",
		Label: "Button Resource Appearance",
		Category: "Button",
		TableName: "Button Resource Appearance",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Login Name",
			"Button Number",
			"Button Label",
			"Resource AOR Id",
			"Appearance",
			"Resource AOR",
			"Location",
			"Zone ID",
		},
		SQLString: "select a.id as userId, a.loginName, b.buttonNumber, b.buttonLabel, c.resourceAORId, c.appearance, d.resourceAOR, e.name as location, f.zoneId as Zone from User a, Button b, ButtonResourceAppearance c, ResourceAOR d, DunkinLocation e, LogonSession f where a.userCDIId=b.parentUserCDIId and b.id=c.parentButtonId and c.resourceAORId=d.id and  a.homeLocationId=e.id and a.id=f.userId",
	}, 
	{
		Name: "CDIButtons",
		Label: "Button Info",
		Category: "Button",
		TableName: "Button Information",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Login Name",
			"Button Number",
			"Incoming Action Rings",
			"Resource AOR Id",
			"Appearance",
			"Button Resource Appearance ID",
			"Resource AOR",
			"Device ID",
			"MAC Address",
		},
		SQLString: "select a.id,a.loginName,b.buttonNumber,b.incomingActionRings,c.resourceAORId,c.appearance,c.id,f.resourceAOR,d.deviceId,e.macAddress FROM User a,Button b,ButtonResourceAppearance c,LogonSession d,Device e,ResourceAOR f WHERE a.userCDIId = b.parentUserCDIId AND b.id = c.parentButtonId AND a.id = d.userId AND d.deviceId = e.id and c.resourceAORId = f.id",
	},
	{
		Name: "ARDButtonInfo",
		Label: "ARD Button Info",
		Category: "Button",
		TableName: "ARD Button Information",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"Button Label",
			"Button Number",
			"Auto Signal",
			"Signaling",
		},
		SQLString: "select a.loginName,b.buttonLabel,b.buttonNumber,b.autoSignal,d.signaling FROM User a,Button b,ButtonResourceAppearance c,ResourceAOR d WHERE a.userCDIId = b.parentUserCDIId AND b.id = c.parentButtonId and c.resourceAORId = d.id and d.signaling=false and b.autoSignal=true",
	},
	{
		Name: "ResAORsOnSpkr",
		Label: "ResAOR On Spkr with LineTypes",
		Category: "Resource AOR",
		TableName: "ResAOR On Spkr with LineTypes",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDI ID",
			"TrtZone",
			"Speaker Number",
			"Label",
			"ActiveStatus",
			"ResourceAORId",
			"ResourceAOR",
			"Appearance",
			"ResType",
			"MBR-MRD/Hoot",
			"Sig-MRD",
			"Hoot",
			"resAorZone",
			"resZoneActive",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, f.zoneId as 'TrtZone', b.speakerNumber, b.label, b.activeStatus, c.id as 'resourceAORId',c.resourceAOR, b.appearance, c.type as 'ResType', c.mediaBridgeRequired as 'MBR-MRD/Hoot', c.signaling as 'Sig-MRD', c.hoot as 'Hoot', g.zoneId as 'resAorZone', g.active as 'resZoneActive' from User a, UserSpeakerChannel b, ResourceAOR c, LogonSession f, ResourceZone g where a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and g.active=true and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId  order by f.zoneId, a.loginName,b.speakerNumber, g.active desc, g.zoneId",
	},
	{
		Name: "ResAORsOnButtons",
		Label: "ResAOR On Buttons with LineTypes",
		Category: "Resource AOR",
		TableName: "ResAOR On Buttons with LineTypes",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDI ID",
			"TrtZone",
			"Button Number",
			"Button Label",
			"ResourceAORId",
			"ResourceAOR",
			"Appearance",
			"ResType",
			"MBR-MRD/Hoot",
			"Sig-MRD",
			"Hoot",
			"resAorZone",
			"resZoneActive",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, f.zoneId as 'TrtZone', b.buttonNumber, b.buttonLabel, c.id as 'resourceAORId',c.resourceAOR, e.appearance, c.type as 'ResType', c.mediaBridgeRequired as 'MBR-MRD/Hoot', c.signaling as 'Sig-MRD', c.hoot as 'Hoot', g.zoneId as 'resAorZone', g.active as 'resZoneActive' from User a, Button b, ResourceAOR c, ButtonResourceAppearance e , LogonSession f, ResourceZone g where a.userCDIId=b.parentUserCDIId and e.resourceAORId=c.id and e.parentButtonId=b.id and g.active=true and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId  order by f.zoneId, a.loginName,b.buttonNumber, g.active desc, g.zoneId",
	},
	{
		Name: "OCCOnSpkr",
		Label: "OCC On Spkr",
		Category: "Open Connection",
		TableName: "OCC On Spkr",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDI ID",
			"TrtZone",
			"Speaker Number",
			"Label",
			"ActiveStatus",
			"ResourceAORId",
			"ResourceAOR",
			"ResAorZone",
			"ResZone Active",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, f.zoneId as 'TrtZone', b.speakerNumber, b.label, b.activeStatus, c.id as 'resourceAORId',c.resourceAOR, g.zoneId as 'resAorZone', g.active as 'resZoneActive' from User a, UserSpeakerChannel b, ResourceAOR c, LogonSession f, ResourceZone g where a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and c.type='OpenConnexion' and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId  order by f.zoneId, a.loginName,b.speakerNumber, g.active desc, g.zoneId",
	}, 
	{
		Name: "OCCOnButtons",
		Label: "OCC On Buttons",
		Category: "Open Connection",
		TableName: "OCC On Buttons",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDI ID",
			"TrtZone",
			"Button Number",
			"Button Label",
			"ResourceAORId",
			"ResourceAOR",
			"Appearance",
			"ResAorZone",
			"ResZone Active",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, f.zoneId as 'TrtZone', b.buttonNumber, b.buttonLabel, c.id as 'resourceAORId',c.resourceAOR, e.appearance, g.zoneId as 'resAorZone', g.active as 'resZoneActive' from User a, Button b, ResourceAOR c, ButtonResourceAppearance e , LogonSession f, ResourceZone g where a.userCDIId=b.parentUserCDIId and e.resourceAORId=c.id and e.parentButtonId=b.id and c.type='OpenConnexion' and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId  order by f.zoneId, a.loginName,b.buttonNumber, g.active desc, g.zoneId",
	}, 
	{
		Name: "ActiveOCConSpkr",
		Label: "Active OCC on Spkr",
		Category: "Open Connection",
		TableName: "Active OCC on Spkr",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDIID",
			"Speaker Number",
			"Speaker Label",
			"Active Status",
			"Resource AORId",
			"Resource AOR",
			"Zone ID",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, b.speakerNumber, b.label, b.activeStatus, c.id as 'resourceAORId',c.resourceAOR, f.zoneId from User a, UserSpeakerChannel b, ResourceAOR c, LogonSession f where a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and c.type='OpenConnexion' and a.accountType='real' and a.id=f.userId and b.activeStatus=true order by f.zoneId, a.loginName,b.speakerNumber",
	}, 
	{
		Name: "OCCSpkrWithNoListnPerm", 
		Label: "OCCSpkrWithNoListnPerm Info",
		Category: "Open Connection",
		TableName: "OCCSpkrWithNoListn Permission",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDIID",
			"Speaker Number",
			"Speaker Label",
			"Active Status",
			"ResourceAORId NoLstn",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, b.speakerNumber, b.label, b.activeStatus, c.id as resourceAORIdnoLstn from User a, UserSpeakerChannel b, ResourceAOR c where a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and c.type='OpenConnexion' and a.accountType='real' and a.id not in (select listenersId from ResourceAORUserListenersMap d where c.id=d.resourceAORId)",
	}, 
	{
		Name: "OCCSpkrWithNoSpkrPerm", 
		Label: "OCCSpkrWithNoSpkrPerm Info",
		Category: "Open Connection",
		TableName: "OCCSpkrWithNoSpkr Permission",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDIID",
			"Speaker Number",
			"Speaker Label",
			"Active Status",
			"ResourceAORId NoSpkr",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, b.speakerNumber, b.label, b.activeStatus, c.id as resourceAORIdnoSpkr from User a, UserSpeakerChannel b, ResourceAOR c where a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and c.type='OpenConnexion' and a.accountType='real' and a.id not in (select speakersId from ResourceAORUserSpeakersMap d where c.id=d.resourceAORId)",
	}, 
	{
		Name: "OCCButtonsWithNoListnPerm",
		Label: "OCCButtonsWithNoListnPerm Info",
		Category: "Open Connection",
		TableName: "OCCButtonsWithNoListn Permission",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDIID",
			"Button Number",
			"Button Label",
			"ResourceAORId NoLstn",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, b.buttonNumber, b.buttonLabel, c.id as resourceAORIdnoListn, e.appearance from User a, Button b, ResourceAOR c, ButtonResourceAppearance e where a.userCDIId=b.parentUserCDIId and e.resourceAORId=c.id and c.type='OpenConnexion' and a.accountType='real' and e.parentButtonId=b.id and a.id not in (select listenersId from ResourceAORUserListenersMap d where c.id=d.resourceAORId)",
	}, 
	{
		Name: "Lines",
		Label: "Line Info",
		Category: "Line",
		TableName: "Line Information",
		ColumnNameHeaderMapping: []string{
			"ResourceAOR ID",
			"Resource AOR",
			"Resource Type",
			"TYPE",
			"Hoot",
			"Sig-MRD",
			"Media Bridge Required",
			"AutoEst",
			"ResAor Zone",
			"ResZone Pref",
			"ResZone Active",
			"TrunkAor ID",
			"Trunk AOR",
			"Trunk Type",
			"Trunk Name",
		},
		SQLString: "SELECT a.id AS 'resourceAORId', a.resourceAOR, a.type AS 'ResType',CASE WHEN a.type='Private' and a.hoot = TRUE THEN '[HOOT]' when a.type='Private' and a.signaling=true then '[MRD]' when a.type='Private' and a.signaling=false and a.hoot=false then '[ARD]' when a.type='Private' then '[Private]' else a.type END AS 'TYPE', a.hoot AS 'Hoot', a.signaling AS 'Sig-MRD', a.mediaBridgeRequired AS 'MBR', a.automaticEstablishment AS 'AutoEst', b.zoneId AS 'resAorZone', b.preference AS 'resZonePref', b.active AS 'resZoneActive', f.id AS 'TrunkAorId', f.aor AS 'TrunkAOR', f.trunkType AS 'TrunkType', f.uiName AS 'TrunkName' FROM ResourceAOR a, ResourceZone b LEFT JOIN (SELECT c.resourceZoneId, d.id, d.aor, e.trunkType,e.uiName FROM ResourceZoneTrunkAORTrunkAORsMap c, TrunkAOR d, Trunk e WHERE c.trunkAORsId = d.id AND d.parentTrunkId = e.id) f ON b.id = f.resourceZoneId WHERE a.id = b.parentResourceAORId ORDER BY a.resourceAOR, b.preference",
	}, 
	{
		Name: "OCCButtonsWithNoSpkrPerm",
		Label: "OCCButtonsWithNoSpkrPerm Info",
		Category: "Open Connection",
		TableName: "OCCButtonsWithNoSpkr Permission",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"User CDIID",
			"Button Number",
			"Button Label",
			"ResourceAORId NoSpkr",
		},
		SQLString: "select a.loginName, a.id as userId, a.userCDIId, b.buttonNumber, b.buttonLabel, c.id as resourceAORIdnoSpkr, e.appearance from User a, Button b, ResourceAOR c, ButtonResourceAppearance e where a.userCDIId=b.parentUserCDIId and e.resourceAORId=c.id and c.type='OpenConnexion' and a.accountType='real' and e.parentButtonId=b.id and a.id not in (select speakersId from ResourceAORUserSpeakersMap d where c.id=d.resourceAORId)",
	}, 
	{
		Name: "PersonalDirNamesInfo",
		Label: "PersonalDirNamesInfo",
		Category: "User",
		TableName: "NameInfo",
		ColumnNameHeaderMapping: []string{
				"loginName",
				"ID",
				"FirstName",
				"LastName",
		},
		SQLString: "select a.loginName, c.id,c.firstName, c.lastName from User a, UserCDI b, PersonalContact c where c.parentPersonalDirectoryId=b.personalDirectoryId and a.userCDIId=b.id",
	}, 
	{
		Name: "LatestCommHistorybylinedata",
		Label: "latestCommHistory Info",
		Category: "Line",
		TableName: "LatCommHistorybylineData Info",
		ColumnNameHeaderMapping: []string{
			"Resource AOR",
			"ResourceAOR ID",
			"Rollover Appearance",
			"Event Type",
			"Max Start Time",
			},	
		SQLString: "select distinct b.resourceAOR, a.resourceAORId, a.rolloverAppearance, a.eventType, max(a.startTime) as maxstartTime from CommunicationHistory a, ResourceAOR b where a.resourceAORId=b.id and a.deviceChannelType='Handset' group by a.resourceAORId, a.rolloverAppearance, a.eventType order by a.resourceAORId,a.rolloverAppearance",
	}, 
	{
		Name: "Non-600ButtonsUsers",
		Label: "Find Non-600ButtonsUsers Info",
		Category: "Button",
		TableName: "Non-600ButtonsUsers Info",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"UserCDI ID",
			"No. of Buttons",
		},
		SQLString : "select distinct c.loginName, c.id as userId, c.userCDIId, b.totalCount as NumOfBtns from User c, Button a inner join (select buttonNumber, parentUserCDIId, count(*) totalCount from Button group by Button.parentUserCDIId having count(*) >=2) b on b.buttonNumber = a.buttonNumber and b.parentUserCDIId = a.parentUserCDIId where c.userCDIId=a.parentUserCDIId and b.totalCount<>600",
	}, 
	{
		Name: "UserCDIwithnoUserId",
		Label: "UserCDIwithnoUserId Info",
		Category: "User",
		TableName: "UserCDIwithnoUserId",
		ColumnNameHeaderMapping: []string{
			"UserCDI Id",
			"Intercom Extension",
			"Personal ExtensionId",
			"User Id",
		},
		SQLString : "select * from(select a.id as 'UserCDI id', a.intercomExtension, a.personalExtensionId, b.id as 'User id' from UserCDI a left join (select id, userCDIId from User) b on a.id = b.userCDIId)c where c.`User id` is null",
	}, 
	{
		Name: "ZoneandServerClusterInfo",
		Label: "ZoneandServerCluster Info",
		Category: "Zone",
		TableName: "ZoneandServerCluster Info",
		ColumnNameHeaderMapping: []string{
			"Zone Cluster",
			"VIP Address",
			"IP Address",
			"Host Name",
			"Mac Address",
			"Name",
			"Time Zone",
			"City",
			"Country",
		},
		SQLString:"select a.parentZoneId as ZoneCluster, a.vIPAddress, c.iPAddress,c.hostName,c.macAddress,e.name,e.timeZone,f.city,f.country from ServerCluster a, ServerClusterDeviceServerServersMap b, Device c, DeviceServer d, DunkinLocation e, Address f where a.id=b.serverClusterId and b.serversId=c.deviceServerId and c.deviceServerId=d.id and c.dunkinLocationId = e.id and e.addressId=f.id order by a.parentZoneId,c.iPAddress",
	},
	{
		Name: "UserSpkrsDeviceResourceAORInfo",
		Label:"UserSpkrsDeviceResourceAOR Info",
		Category: "Resource AOR",
		TableName: "UserSpkrsDeviceResourceAOR Info",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"User ID",
			"userCDI ID",
			"HandsetMute Option",
			"MicMute Option",
			"Device Id",
			"Mac Address",
			"Ip Address",
			"Turret ZoneId",
			"Speaker Number",
			"label",
			"Active Status",
			"ResourceAORId",
			"ResourceAOR",
			"Appearance",
			"Buttonlatch",
			"Id in Group1",
			"Id in Group2",
			"Resource Type",
			"MBR-MRD/Hoot",
			"Sig-MRD",
			"Hoot",
			"ResorceAORZone",
			"ResourceZoneActive",
		},
		SQLString:"select a.loginName, a.id as userId, a.userCDIId, h.handsetMuteOption, h.micMuteOption, f.deviceId, i.macAddress, i.iPAddress, f.zoneId as 'TrtZone', b.speakerNumber, b.label, b.activeStatus, c.id as 'resourceAORId',c.resourceAOR, b.appearance, b.buttonLatch, b.isInGroup1, b.isInGroup2, c.type as 'ResType', c.mediaBridgeRequired as 'MBR-MRD/Hoot', c.signaling as 'Sig-MRD', c.hoot as 'Hoot', g.zoneId as 'resAorZone', g.active as 'resZoneActive' from User a, UserSpeakerChannel b, ResourceAOR c, LogonSession f, ResourceZone g, UserCDI h, Device i where f.deviceId=i.id and a.userCDIId=h.id and a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and g.active=true and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId  order by f.zoneId, a.loginName,b.speakerNumber, g.active desc, g.zoneId",
	}, 
	{
		Name: "TurretInfo",
		Label:"Turret Info",
		Category:"System",
		TableName:"Turret Info",
		ColumnNameHeaderMapping: []string{
			"User Id",
			"UserCDI Id",
			"Login Name",
			"Device Id",
			"Mac Address",
			"IP Address",
		},
		SQLString:"select a.id as UserId, a.userCDIId as UserCDIId, a.loginName as LoginName, b.id as DeviceId, b.macAddress as MacAddress, b.IPAddress as IP_Address from User a, Device b, LogonSession c where a.id=c.userId and b.id=c.deviceId",
	}, 
	{
		Name: "JobDetails",
		Label:"Job Details Info",
		Category:"System",
		TableName:"Job Details",
		ColumnNameHeaderMapping: []string{
			"Description",
			"Date/Hour",
			"ZoneID",
			"StartTimeCount",
		},
		SQLString:"select distinct left(description, 22) as 'Description', left(startTime,10) as 'Date/Hour', zoneId, count(startTime) as 'Count' from Job  group by left(description, 22),left(startTime,10),zoneId",
	}, 
	{
		Name: "DuplicateButtons",
		Label:"DuplicateButton Info",
		Category:"Button",
		TableName:"DuplicateButton Info",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"Swap",
			"ID",
			"AutoSignal",
			"ButtonLabel",
			"ButtonLock",
			"ButtonNumber",
			"ButtonType",
			"Destination",
			"divertOnImmorBusytoExtension",
			"divertOnRNAtoExtension",
			"divertReason",
			"icon",
			"includeInCallHistory",
			"incomingActionCLI",
			"incomingActionFloat",
			"incomingActionPriority",
			"incomingActionRings",
			"keySequence",
			"personalPointOfContactId",
			"pointOfContactId",
			"ringTone",
			"schemaDifference_blob_reserved",
			"schemaDifference_reserved",
			"uiName",
			"lastModified",
			"parentUserCDIId",
			"DuplicateTotalCount",
		},
		SQLString:"select c.loginName, d.swap, a.*, b.totalCount as Duplicate from User c, UserCDI d, Button a inner join (select buttonNumber, parentUserCDIId, count(*) totalCount from Button group by Button.buttonNumber, Button.parentUserCDIId having count(*) >=2) b on b.buttonNumber = a.buttonNumber and b.parentUserCDIId = a.parentUserCDIId where c.userCDIId=a.parentUserCDIId and c.userCDIId=d.id",
	}, 
	{
		Name: "ButtonCountforResAOR",
		Label:"ButtonCount perZone for each ResAOR",
		Category:"Resource AOR",
		TableName:"ButtonCount perZone for each ResAOR",
		ColumnNameHeaderMapping: []string{
			"ResourceAorId",
			"ResourceAOR",
			"ResType",
			"MBR(MRD/Hoot)",
			"Sig-MRD",
			"Hoot",
			"resAorZone",
			"resZoneActive",
			"TrtZone",
			"NumberOfButtons",
		},
		SQLString:"select c.id as 'resourceAORId', c.resourceAOR, c.type as 'ResType', c.mediaBridgeRequired as 'MBR(MRD/Hoot)', c.signaling as 'Sig-MRD', c.hoot as 'Hoot', g.zoneId as 'resAorZone', g.active as 'resZoneActive', f.zoneId as 'TrtZone', count(*) as 'NumBtns' from User a, Button b, ResourceAOR c, ButtonResourceAppearance e , LogonSession f, ResourceZone g where a.userCDIId=b.parentUserCDIId and e.resourceAORId=c.id and e.parentButtonId=b.id and g.active=true and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId  group by c.id, g.zoneId, f.zoneId order by c.id, e.appearance, g.zoneId, g.active desc, f.zoneId, a.loginName, b.buttonNumber",
	}, 
	{
		Name: "SpeakerCountforResAOR",
		Label:"SpeakerCount perZone for each ResAOR",
		Category:"Resource AOR",
		TableName:"SpeakerCount perZone for each ResAOR",
		ColumnNameHeaderMapping: []string{
			"ResourceAorId",
			"ResourceAOR",
			"ResType",
			"MBR(MRD/Hoot)",
			"Sig-MRD",
			"Hoot",
			"resAorZone",
			"resZoneActive",
			"TrtZone",
			"NumberofSpeakers",
		},
		SQLString:"select c.id as 'resourceAORId', c.resourceAOR, c.type as 'ResType', c.mediaBridgeRequired as 'MBR(MRD/Hoot)', c.signaling as 'Sig-MRD', c.hoot as 'Hoot', g.zoneId as 'resAorZone', g.active as 'resZoneActive', f.zoneId as 'TrtZone', count(*) as 'NumSpkrs' from User a, UserSpeakerChannel b, ResourceAOR c, LogonSession f, ResourceZone g where a.userCDIId=b.parentUserCDIId and b.resourceAORId=c.id and g.active=true and a.accountType='real' and a.id=f.userId and c.id=g.parentResourceAORId group by c.id, g.zoneId, f.zoneId order by c.id, g.zoneId, g.active desc, f.zoneId, a.loginName, b.speakerNumber",
	}, 
	{
		Name: "CdiCounts",
		Label:"CDI Counts",
		Category:"System",
		TableName:"CDI Counts",
		ColumnNameHeaderMapping: []string{ 
			"Iqmax",
			"Mini4",
			"Edge",
			"Touch",
			"PulseDevice",
			"UDA",
		},
		SQLString:"select(select concat('All: ',count(*)) from Device a, DeviceTurret b where a.deviceTypeId=3 and a.deviceTurretId=b.id and b.turretSoftwareLicense ='MAX') as 'IQ/Max',(select concat('All: ',count(*)) from Device a, DeviceTurret b where a.deviceTypeId=3 and a.deviceTurretId=b.id and b.turretSoftwareLicense ='Mini4') as 'Mini4',(select concat('All: ',count(*)) from Device a, DeviceTurret b where a.deviceTypeId=3 and a.deviceTurretId=b.id and (b.turretSoftwareLicense ='Edge' or b.turretSoftwareLicense ='Basic')) as 'Edge',(select concat('All: ',count(*)) from Device a, DeviceMercury b where a.deviceTypeId=7 and a.deviceMercuryId=b.id and b.turretSoftwareLicense ='Mercury') as 'IQ/Max Touch',(select concat('All: ',count(*)) from Device a, DevicePulse b where a.deviceTypeId=6 and a.devicePulseId=b.id and b.turretSoftwareLicense ='Pulse') as 'PulseDevice',(select concat('All: ',count(*)) from Device a where a.deviceTypeId=4) as 'UDA' union select (select concat('Actv: ',count(*)) from Device a, DeviceTurret b, LogonSession c where a.deviceTypeId=3 and a.deviceTurretId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='MAX' and c.sessionType='cdi') as 'IQ/Max',(select concat('Actv: ',count(*)) from Device a, DeviceTurret b, LogonSession c where a.deviceTypeId=3 and a.deviceTurretId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='Mini4' and c.sessionType='cdi') as 'Mini4',(select concat('Actv: ',count(*)) from Device a, DeviceTurret b, LogonSession c where a.deviceTypeId=3 and a.deviceTurretId=b.id and a.id=c.deviceId and (b.turretSoftwareLicense ='Edge' or b.turretSoftwareLicense ='Basic') and c.sessionType='cdi') as 'Edge',(select concat('Actv: ',count(*)) from Device a, DeviceMercury b, LogonSession c where a.deviceTypeId=7 and a.deviceMercuryId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='Mercury' and c.sessionType='cdi') as 'IQ/Max Touch',(select concat('Actv: ',count(*)) from Device a, DevicePulse b, LogonSession c where a.deviceTypeId=6 and a.devicePulseId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='Pulse' and c.sessionType='cdi') as 'PulseDevice',(select concat('Actv: ',count(*)) from Device a, LogonSession c where a.deviceTypeId=4 and a.id=c.deviceId and c.sessionType='cdi') as 'UDA' union select (select concat('LgOn: ',count(*)) from Device a, DeviceTurret b, LogonSession c where a.deviceTypeId=3 and a.deviceTurretId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='MAX' and c.sessionType='cdiuser') as 'IQ/Max',(select concat('LgOn: ',count(*)) from Device a, DeviceTurret b, LogonSession c where a.deviceTypeId=3 and a.deviceTurretId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='Mini4' and c.sessionType='cdiuser') as 'Mini4',(select concat('LgOn: ',count(*)) from Device a, DeviceTurret b, LogonSession c where a.deviceTypeId=3 and a.deviceTurretId=b.id and a.id=c.deviceId and (b.turretSoftwareLicense ='Edge' or b.turretSoftwareLicense ='Basic') and c.sessionType='cdiuser') as 'Edge',(select concat('LgOn: ',count(*)) from Device a, DeviceMercury b, LogonSession c where a.deviceTypeId=7 and a.deviceMercuryId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='Mercury' and c.sessionType='cdiuser') as 'IQ/Max Touch',(select concat('LgOn: ',count(*)) from Device a, DevicePulse b, LogonSession c where a.deviceTypeId=6 and a.devicePulseId=b.id and a.id=c.deviceId and b.turretSoftwareLicense ='Pulse' and c.sessionType='cdiuser') as 'PulseDevice',(select concat('LgOn: ',count(*)) from Device a, LogonSession c where a.deviceTypeId=4 and a.id=c.deviceId and c.sessionType='cdiuser') as 'UDA'",
	}, 
	{
		Name: "LicenseInfo",
		Label:"License Info",
		Category:"System",
		TableName:"License Info",
		ColumnNameHeaderMapping: []string{
			"FeatId",
			"Name",
			"Hard Limit",
			"Soft Limit",
			"User License Feat Count",
			"Dev License Feat Count",
		},
		SQLString:"select lfeat.id as 'FeatId', lfeat.name, lcdfeat.hardLimit, lcdfeat.softLimit, userLic.userLicFeatCnt, devLic.devLicFeatCnt from LicensedFeature lcdfeat, LicensableFeature lfeat left join (select licensableFeatureId, count(licensableFeatureId) as 'userLicFeatCnt' from LicensedFeatureAssignedUser group by licensableFeatureId) as userLic on lfeat.id = userLic.licensableFeatureId left join (select licensableFeatureId, count(licensableFeatureId) as 'devLicFeatCnt' from LicensedFeatureAssignedDevice group by licensableFeatureId) as devLic on lfeat.id = devLic.licensableFeatureId where lcdfeat.licensableFeatureId=lfeat.id order by lfeat.id",
	}, 
	{
		Name: "UnlinkedButtons",
		Label:"Unlinked Buttons",
		Category:"Button",
		TableName:"Unlinked Buttons",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Login Name",
			"Button Number",
			"Button Label",
			"Button Type",
			"Resource AOR ID",
			"Appearance",
			"Resource AOR",
		},
		SQLString:"select a.id, a.loginName, b.buttonNumber, b.buttonLabel, b.buttonType, e.resourceAORId, e.appearance, e.resourceAOR from User a, Button b left join (select c.resourceAORId, c.appearance, d.resourceAOR,c.parentButtonId from ButtonResourceAppearance c, ResourceAOR d where d.id=c.resourceAORId) e on b.id=e.parentButtonId where a.userCDIId=b.parentUserCDIId and (b.buttonType='Resource' or b.buttonType='ResourceAndSpeedDial' or b.buttonType='SimplexConference' or b.buttonType='DuplexConference' or b.buttonType='OneButtonDivert') and e.resourceAORId is null order by a.loginName, b.buttonNumber",
	}, 
	{
		Name: "ReplicationConfig",
		Label:"Replication Config",
		Category: "Zone",
		TableName:"Replication Config",
		ColumnNameHeaderMapping: []string{
			"Zone ID",
			"Zone VIP",
			"Zone Name",
			"Instance Name",
			"Location Name",
			"Portal Zone",
			"Replication Role",
			"Replication Enabled",
			"Is Default DC",
			"Tier 2 State",
			"Floor",
			"Address 1",
			"Address 2",
			"City",
			"Country",
			"State",
			"Time Zone",
			"Schema Name",
			"Software Version",
			"BW Software Version",
			"Location Type",
		},
		SQLString:"select a.zoneid as 'ZoneID', a.vip as 'ZoneVIP', a.name as 'ZoneName', a.instanceName as 'InstanceName', b.locationName, e.isPortalZone as 'Portal Zone', f.replicationRole, f.replicationEnabled, dc.isDefaultDC, dc.tier2State, c.floor, d.address1, d.address2, d.city, d.country, d.state, c.timeZone, e.schemaName, e.softwareVersion, e.bWSoftwareVersion, b.locationType as 'LocationType' from ZonesAndInstance a, ZonesAndLocationsImmutable b, DunkinLocation c, Address d, Zone e, InterzoneCommConfigZone f, Instance h, DataCenter dc where a.name=b.zoneName and b.locationName=c.name and a.zoneId=e.id and d.id=c.addressId and f.id=e.interzoneCommConfigZoneId and h.name=a.instanceName and dc.addressId = c.addressId order by a.zoneid;",
	}, 
	{
		Name: "ReplicationAudit",
		Label:"ReplicationAudit",
		Category:"Zone",
		TableName:"Replication Audit",
		ColumnNameHeaderMapping: []string{
			"Entity Name",
			"Entity ID",
			"Time of Failure",
			"Number of Attempts",
			"Last Modified",
		},
		SQLString:"select entityName, entityId, timeOfFailure, count(*) as 'NbrOfAttempts', max(lastModified) from ReplicationAuditLog group by entityName, entityId, timeOfFailure having count(*) >1 order by entityName, entityId",
	}, 
	{
		Name: "DevZnLocationAudit",
		Label:"Dev Zone Location Audit",
		Category:"Zone",
		TableName: "Dev Zone Location Audit",
		ColumnNameHeaderMapping: []string{
			"Dev ID",
			"Host Name",
			"Dev Location",
			"Zone ID",
			"Zone Name",
			"Zone Location",
			"Zone Location Name",
			"Address ID",
			"Address Name",
		},
		SQLString:"Select d.id as 'DevId', d.hostName, d.dunkinLocationId as 'DevLoc', z.id as 'ZnId', z.name as 'ZnName', z.dunkinLocationId as 'ZnLoc', dl.name as 'ZnLocName', dl.addressId as 'AddressId', a.name as 'AddresNm'  from Device d, Zone z, DunkinLocation dl, Address a where dl.addressId=a.id and z.dunkinLocationId=dl.id and d.dunkinLocationId <> z.dunkinLocationId and d.parentZoneId=z.id and d.deviceTypeId=5",
	}, 
	{
		Name: "CallsPerDay",
		Label:"Calls Per Day",
		Category:"User",
		TableName:"Calls Per Day",
		ColumnNameHeaderMapping: []string{
			"Date",
			"Zone",
			"Count",
		},
		SQLString:"select distinct left(a.startTime,10) as 'Date', c.parentZoneId as 'Zone', count(a.startTime) as 'Count' from CommunicationHistory a, User b, Device c where a.userId=b.id and a.deviceIdId=c.id and (a.eventType='Initiated' or a.eventType='Received') group by left(a.startTime,10),c.parentZoneId;",
	}, 
	{
		Name: "CallsPerDayPerUser",
		Label:"Calls Per Day Per User",
		Category:"User",
		TableName:"Calls Per Day Per User",
		ColumnNameHeaderMapping: []string{
			"User ID",
			"Login Name",
			"Device ID",
			"Zone",
			"Date",
			"Count",
		},
		SQLString:"select distinct a.userId, b.loginName, a.deviceIdId, c.parentZoneId as 'Zone', left(a.startTime,10) as 'Date', count(a.startTime) as 'Count' from CommunicationHistory a, User b, Device c where a.userId=b.id and a.deviceIdId=c.id and (a.eventType='Initiated' or a.eventType='Received') group by left(a.startTime,10),a.userId;",
	}, 
	{
		Name: "Missing/DupeBtns",
		Label:"Missing/Dupe Buttons",
		Category:"Button",
		TableName:"Missing/Duplicate Buttons",
		ColumnNameHeaderMapping: []string{
			"Login Name",
			"Button Number",
			"Button Label",
			"Button Type",
			"Button Info",
		},
		SQLString:"select * from ((select c.loginName as 'LoginName', a.buttonNumber as 'BtnNum', a.buttonLabel as 'BtnLbl', a.buttonType as 'BtnType', b.totalCount as 'BtnInfo' from User c, UserCDI d, Button a inner join (select buttonNumber, parentUserCDIId, count(*) totalCount from Button group by Button.buttonNumber, Button.parentUserCDIId having count(*) >=2) b on b.buttonNumber = a.buttonNumber and b.parentUserCDIId = a.parentUserCDIId where c.userCDIId=a.parentUserCDIId and c.userCDIId=d.id) union (select u.loginName as 'LoginName', b.buttonNumber+1 as 'BtnNum', 'MISSING' as 'BtnLbl',  '[none]' as 'BtnType', b.parentUserCDIId*1000+b.buttonNumber+1 as 'BtnInfo' from Button b, User u where u.userCDIId=b.parentUserCDIId and b.parentUserCDIId*1000+b.buttonNumber+1 not in (select parentUserCDIId*1000+buttonNumber from Button) and b.buttonNumber != 600)) as btn  order by btn.LoginName, btn.BtnNum;",
	},
}
